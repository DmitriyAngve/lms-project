

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js" // это значит, что генерируется клиент Prisma для zpsrf JavaScript
  previewFeatures = ["fullTextSearch", "fullTextIndex"] // указывает на использование эксперементальных возможностей Prisma, связанных с полнотекстовым поиском и индексацией полнотекстового поиска. С этим курсы в таблице поиска можно искать по названию
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float? // числовое значение с плавающей запятой
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]
    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  course Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int // Int - целочисленное поле
  isPublished Boolean @default(false)
  isFree Boolean @default(false)


  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}


model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String
  
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase{
  id String @id @default(uuid())
  userId  String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId]) // индекс (необходим для улучшенияпроизводительности при поиске и сортировке записей в таблице БД). В этом случае это обозначает, что в БД будет создан индекс дял ускорения и сортировки записей, используюзих поле "courseId"
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}